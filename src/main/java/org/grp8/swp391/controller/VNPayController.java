package org.grp8.swp391.controller;

import jakarta.servlet.http.HttpServletRequest;
import org.grp8.swp391.dto.request.VNPayPaymentRequest;
import org.grp8.swp391.entity.Payment;
import org.grp8.swp391.entity.PaymentStatus;
import org.grp8.swp391.entity.Subscription;
import org.grp8.swp391.entity.User;
import org.grp8.swp391.entity.User_Subscription;
import org.grp8.swp391.repository.PaymentRepo;
import org.grp8.swp391.repository.SubRepo;
import org.grp8.swp391.repository.UserRepo;
import org.grp8.swp391.repository.UserSubRepo;
import org.grp8.swp391.service.VNPayService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/vnpay")
public class VNPayController {

    @Autowired
    private VNPayService vnPayService;

    @Autowired
    private PaymentRepo paymentRepo;

    @Autowired
    private UserSubRepo userSubRepo;

    @Autowired
    private UserRepo userRepo;

    @Autowired
    private SubRepo subRepo;

    /**
     * T·∫°o URL thanh to√°n VNPay
     * POST /api/vnpay/create-payment
     * Body: { amount, orderInfo, subscriptionId (ID c·ªßa g√≥i Sub), userId }
     * BE s·∫Ω t·ª± ƒë·ªông generate orderId unique
     */
    @PostMapping("/create-payment")
    public ResponseEntity<?> createPayment(
            @RequestBody VNPayPaymentRequest paymentRequest,
            HttpServletRequest request
    ) {
        try {
            // 1. Get User v√† Subscription package
            User user = userRepo.findByUserID(paymentRequest.getUserId());
            if (user == null) {
                throw new RuntimeException("User not found");
            }
            
            Subscription subscription = subRepo.findById(paymentRequest.getSubscriptionId())
                    .orElseThrow(() -> new RuntimeException("Subscription package not found"));
            
            // 2. ‚úÖ CHECK Payment PENDING (ngƒÉn mua g√≥i m·ªõi khi c√≥ payment ch∆∞a x·ª≠ l√Ω)
            List<Payment> pendingPayments = paymentRepo.findByUserIdAndStatus(
                paymentRequest.getUserId(), 
                PaymentStatus.PENDING
            );
            
            if (!pendingPayments.isEmpty()) {
                Payment latestPending = pendingPayments.get(0); // L·∫•y payment PENDING m·ªõi nh·∫•t
                long minutesAgo = (new Date().getTime() - latestPending.getCreateDate().getTime()) / 60000;
                
                if (minutesAgo < 15) {
                    // Ch∆∞a ƒë·ªß 15 ph√∫t ‚Üí tr·∫£ v·ªÅ th√¥ng tin payment ƒë·ªÉ user c√≥ th·ªÉ h·ªßy
                    return ResponseEntity.badRequest().body(Map.of(
                        "error", "PENDING_PAYMENT_EXISTS",
                        "message", "B·∫°n c√≥ giao d·ªãch ch∆∞a ho√†n t·∫•t cho g√≥i " + 
                                   latestPending.getUserSubscription().getSubscriptionId().getSubName() + 
                                   ". Vui l√≤ng h·ªßy giao d·ªãch c≈© tr∆∞·ªõc khi ƒëƒÉng k√Ω g√≥i m·ªõi.",
                        "pendingPayment", Map.of(
                            "paymentId", latestPending.getPaymentId(),
                            "orderId", latestPending.getOrderId(),
                            "amount", latestPending.getAmount(),
                            "packageName", latestPending.getUserSubscription().getSubscriptionId().getSubName(),
                            "createDate", latestPending.getCreateDate(),
                            "minutesRemaining", 15 - minutesAgo
                        )
                    ));
                } else {
                    // ƒê√£ > 15 ph√∫t ‚Üí auto-cancel payment c≈© (h·∫øt h·∫°n VNPay)
                    latestPending.setStatus(PaymentStatus.CANCELLED);
                    latestPending.setUpdatedAt(new Date());
                    paymentRepo.save(latestPending);
                    System.out.println("‚è∞ Auto-cancelled expired payment: " + latestPending.getOrderId());
                }
            }
            
            // 3. ‚úÖ T·∫†O ho·∫∑c T√åM User_Subscription PENDING_PAYMENT
            User_Subscription userSubscription;
            
            // T√¨m xem ƒë√£ c√≥ User_Subscription cho g√≥i n√†y ch∆∞a (status PENDING_PAYMENT ho·∫∑c FAILED)
            List<User_Subscription> existingSubs = userSubRepo.findByUser(user);
            User_Subscription reusableSub = null;
            
            for (User_Subscription sub : existingSubs) {
                // T√¨m subscription c√πng g√≥i, ch∆∞a ACTIVE/EXPIRED
                if (sub.getSubscriptionId().getSubId().equals(subscription.getSubId()) &&
                    ("PENDING_PAYMENT".equals(sub.getStatus()) || "FAILED".equals(sub.getStatus()))) {
                    reusableSub = sub;
                    break;
                }
            }
            
            if (reusableSub != null) {
                // ‚úÖ REUSE subscription c≈© (cho ph√©p retry)
                userSubscription = reusableSub;
                userSubscription.setStatus("PENDING_PAYMENT"); // Reset v·ªÅ PENDING_PAYMENT
                userSubRepo.save(userSubscription);
                System.out.println("‚ôªÔ∏è Reusing existing User_Subscription: " + userSubscription.getUserSubId());
            } else {
                // ‚úÖ T·∫†O subscription m·ªõi
                userSubscription = new User_Subscription();
                userSubscription.setUser(user);
                userSubscription.setSubscriptionId(subscription);
                userSubscription.setStatus("PENDING_PAYMENT");
                userSubscription.setStartDate(null);
                userSubscription.setEndDate(null);
                userSubscription = userSubRepo.save(userSubscription);
                System.out.println("üìù Created new User_Subscription: " + userSubscription.getUserSubId());
            }
            
            // 4. Generate unique orderId
            String orderId = vnPayService.generateOrderId(userSubscription.getUserSubId());
            
            // 5. ‚úÖ T·∫†O Payment M·ªöI (1 subscription c√≥ th·ªÉ c√≥ nhi·ªÅu payment attempt)
            Payment payment = new Payment();
            payment.setOrderId(orderId);
            payment.setAmount(paymentRequest.getAmount().doubleValue());
            payment.setOrderInfo(paymentRequest.getOrderInfo());
            payment.setUserId(paymentRequest.getUserId());
            payment.setUserSubscription(userSubscription);
            payment.setMethod("VNPAY");
            payment.setStatus(PaymentStatus.PENDING);
            payment.setCreateDate(new Date());
            paymentRepo.save(payment);
            
            // 6. T·∫°o payment URL (bankCode = null, user ch·ªçn t·∫°i VNPay)
            String ipAddress = vnPayService.getIpAddress(request);
            String paymentUrl = vnPayService.createPaymentUrl(
                orderId, 
                paymentRequest.getAmount(), 
                paymentRequest.getOrderInfo(), 
                ipAddress, 
                null  // bankCode = null, user ch·ªçn ng√¢n h√†ng t·∫°i VNPay
            );
            
            // 7. Tr·∫£ v·ªÅ response
            Map<String, Object> response = new HashMap<>();
            response.put("paymentUrl", paymentUrl);
            response.put("orderId", orderId);
            response.put("amount", paymentRequest.getAmount());
            response.put("paymentId", payment.getPaymentId());
            response.put("userSubId", userSubscription.getUserSubId());
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(Map.of(
                "error", "Failed to create payment URL",
                "message", e.getMessage()
            ));
        }
    }

    /**
     * Callback t·ª´ VNPay (IPN - Instant Payment Notification)
     * GET /api/vnpay/callback
     * VNPay server g·ªçi endpoint n√†y ƒë·ªÉ th√¥ng b√°o k·∫øt qu·∫£ thanh to√°n
     */
    @GetMapping("/callback")
    public ResponseEntity<?> vnpayCallback(@RequestParam Map<String, String> params) {
        try {
            // 1. Verify signature
            boolean isValid = vnPayService.verifyCallback(params);
            
            if (!isValid) {
                System.out.println("‚ùå Invalid signature from VNPay");
                return ResponseEntity.badRequest().body(Map.of(
                    "RspCode", "97",
                    "Message", "Invalid signature"
                ));
            }

            // 2. L·∫•y th√¥ng tin giao d·ªãch
            String vnp_ResponseCode = params.get("vnp_ResponseCode");
            String vnp_TxnRef = params.get("vnp_TxnRef"); // orderId
            String vnp_TransactionNo = params.get("vnp_TransactionNo");
            String vnp_BankCode = params.get("vnp_BankCode");

            // 3. T√¨m Payment trong DB
            Payment payment = paymentRepo.findByOrderId(vnp_TxnRef);
            if (payment == null) {
                System.out.println("‚ùå Payment not found: " + vnp_TxnRef);
                return ResponseEntity.badRequest().body(Map.of(
                    "RspCode", "01",
                    "Message", "Order not found"
                ));
            }

            // 4. Ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n v√† update DB
            if ("00".equals(vnp_ResponseCode)) {
                // ‚úÖ Thanh to√°n th√†nh c√¥ng
                payment.setStatus(PaymentStatus.COMPLETED);
                payment.setTransactionCode(vnp_TransactionNo);
                payment.setResponseCode(vnp_ResponseCode);
                payment.setBankCode(vnp_BankCode);
                payment.setUpdatedAt(new Date());
                payment.setProviderResponse(params.toString()); // L∆∞u raw response
                paymentRepo.save(payment);
                
                // üî• K√≠ch ho·∫°t User_Subscription
                User_Subscription userSub = payment.getUserSubscription();
                if (userSub != null && userSub.getSubscriptionId() != null) {
                    userSub.setStatus("ACTIVE");
                    userSub.setStartDate(new Date());
                    
                    // T√≠nh endDate = startDate + duration (days)
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(new Date());
                    cal.add(Calendar.DAY_OF_MONTH, userSub.getSubscriptionId().getDuration());
                    userSub.setEndDate(cal.getTime());
                    
                    userSubRepo.save(userSub);
                    System.out.println("‚úÖ Subscription activated: " + userSub.getUserSubId());
                }
                
                System.out.println("‚úÖ Payment successful: " + vnp_TxnRef);
                
                return ResponseEntity.ok(Map.of(
                    "RspCode", "00",
                    "Message", "Success"
                ));
            } else {
                // ‚ùå Thanh to√°n th·∫•t b·∫°i
                payment.setStatus(PaymentStatus.FAILED);
                payment.setResponseCode(vnp_ResponseCode);
                payment.setUpdatedAt(new Date());
                payment.setProviderResponse(params.toString());
                paymentRepo.save(payment);
                
                // ‚úÖ KH√îNG set User_Subscription = FAILED
                // Gi·ªØ nguy√™n status = "PENDING_PAYMENT" ƒë·ªÉ user c√≥ th·ªÉ retry
                User_Subscription userSub = payment.getUserSubscription();
                if (userSub != null) {
                    // Ch·ªâ log, KH√îNG thay ƒë·ªïi status
                    System.out.println("‚ùå Payment failed for subscription: " + userSub.getUserSubId() + 
                                     " - User can retry payment");
                }
                
                System.out.println("‚ùå Payment failed: " + vnp_TxnRef + " - Code: " + vnp_ResponseCode);
                
                return ResponseEntity.ok(Map.of(
                    "RspCode", "00",
                    "Message", "Confirmed"
                ));
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(Map.of(
                "RspCode", "99",
                "Message", "Unknown error: " + e.getMessage()
            ));
        }
    }

    /**
     * Return URL - Trang ng∆∞·ªùi d√πng quay v·ªÅ sau khi thanh to√°n
     * GET /api/vnpay/return
     */
    @GetMapping("/return")
    public ResponseEntity<?> vnpayReturn(@RequestParam Map<String, String> params) {
        try {
            // Verify signature
            boolean isValid = vnPayService.verifyCallback(params);
            
            if (!isValid) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Invalid signature"
                ));
            }

            String vnp_ResponseCode = params.get("vnp_ResponseCode");
            String vnp_TxnRef = params.get("vnp_TxnRef");
            String vnp_Amount = params.get("vnp_Amount");
            String vnp_TransactionNo = params.get("vnp_TransactionNo");
            String vnp_BankCode = params.get("vnp_BankCode");

            Map<String, Object> response = new HashMap<>();
            response.put("orderId", vnp_TxnRef);
            response.put("amount", Long.parseLong(vnp_Amount) / 100); // Chia 100 v√¨ VNPay nh√¢n 100
            response.put("transactionNo", vnp_TransactionNo);
            response.put("bankCode", vnp_BankCode);
            response.put("responseCode", vnp_ResponseCode);

            if ("00".equals(vnp_ResponseCode)) {
                response.put("success", true);
                response.put("message", "Payment successful");
            } else {
                response.put("success", false);
                response.put("message", getResponseMessage(vnp_ResponseCode));
            }

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "Error processing return: " + e.getMessage()
            ));
        }
    }

    /**
     * L·∫•y message t·ª´ response code
     */
    private String getResponseMessage(String responseCode) {
        switch (responseCode) {
            case "00": return "Giao d·ªãch th√†nh c√¥ng";
            case "07": return "Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng).";
            case "09": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng.";
            case "10": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn";
            case "11": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.";
            case "12": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a.";
            case "13": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP). Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.";
            case "24": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch";
            case "51": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.";
            case "65": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y.";
            case "75": return "Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨.";
            case "79": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch";
            default: return "Giao d·ªãch th·∫•t b·∫°i";
        }
    }

    /**
     * Retry thanh to√°n cho User_Subscription
     * POST /api/vnpay/retry-payment
     * Body: { userSubId, userId }
     */
    @PostMapping("/retry-payment")
    public ResponseEntity<?> retryPayment(
            @RequestBody Map<String, Object> requestBody,
            HttpServletRequest request
    ) {
        try {
            Long userSubId = Long.valueOf(requestBody.get("userSubId").toString());
            String userId = requestBody.get("userId").toString();
            
            // 1. Get User_Subscription WITH User (eager loading)
            User_Subscription userSub = userSubRepo.findByIdWithUser(userSubId)
                    .orElseThrow(() -> new RuntimeException("User_Subscription not found"));
            
            // 2. Verify ownership
            if (userSub.getUser() == null) {
                return ResponseEntity.badRequest().body(Map.of(
                    "error", "Invalid Data",
                    "message", "User_Subscription does not have associated user"
                ));
            }
            
            if (!userSub.getUser().getUserID().equals(userId)) {
                return ResponseEntity.badRequest().body(Map.of(
                    "error", "Unauthorized",
                    "message", "This subscription does not belong to you. Expected: " + userSub.getUser().getUserID() + ", Got: " + userId
                ));
            }
            
            // 3. Check status
            if ("ACTIVE".equals(userSub.getStatus()) || "EXPIRED".equals(userSub.getStatus())) {
                return ResponseEntity.badRequest().body(Map.of(
                    "error", "Cannot retry payment",
                    "message", "Subscription is already " + userSub.getStatus()
                ));
            }
            
            // 4. Generate new orderId
            String orderId = vnPayService.generateOrderId(userSubId);
            
            // 5. T·∫°o Payment m·ªõi
            Payment payment = new Payment();
            payment.setOrderId(orderId);
            payment.setAmount(Double.valueOf(userSub.getSubscriptionId().getSubPrice()));
            payment.setOrderInfo("Thanh to√°n l·∫°i g√≥i " + userSub.getSubscriptionId().getSubName());
            payment.setUserId(userId);
            payment.setUserSubscription(userSub);
            payment.setMethod("VNPAY");
            payment.setStatus(PaymentStatus.PENDING);
            payment.setCreateDate(new Date());
            paymentRepo.save(payment);
            
            // 6. T·∫°o payment URL
            String ipAddress = vnPayService.getIpAddress(request);
            String paymentUrl = vnPayService.createPaymentUrl(
                orderId,
                payment.getAmount().longValue(),
                payment.getOrderInfo(),
                ipAddress,
                null
            );
            
            // 7. Return response
            Map<String, Object> response = new HashMap<>();
            response.put("paymentUrl", paymentUrl);
            response.put("orderId", orderId);
            response.put("amount", payment.getAmount());
            response.put("paymentId", payment.getPaymentId());
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(Map.of(
                "error", "Failed to retry payment",
                "message", e.getMessage()
            ));
        }
    }
}
