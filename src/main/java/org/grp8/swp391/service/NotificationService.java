package org.grp8.swp391.service;

import org.grp8.swp391.entity.*;
import org.grp8.swp391.repository.NotificationRepo;
import org.grp8.swp391.repository.PaymentRepo;
import org.grp8.swp391.repository.UserRepo;
import org.grp8.swp391.repository.UserSubRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

@Service
public class NotificationService {

    @Autowired
    private NotificationRepo notificationRepo;

    @Autowired
    private UserRepo userRepo;

    @Autowired
    private UserSubRepo userSubRepo;

    @Autowired
    private PaymentRepo paymentRepo;


    public List<Notification> getNotificationsByUser(String userId) {
        User user = userRepo.findByUserID(userId);
        if (user == null) throw new RuntimeException("User not found");
        return notificationRepo.findByUserAndStatusOrderByCreatedTimeDesc(user, NotificationStatus.ACTIVE);
    }


    public Notification createNotification(String userId, String message) {
        User user = userRepo.findByUserID(userId);
        if (user == null) throw new RuntimeException("User not found");

        Notification notification = new Notification();
        notification.setUser(user);
        notification.setMessage(message);
        notification.setCreatedTime(new Date());
        notification.setStatus(NotificationStatus.ACTIVE);

        return notificationRepo.save(notification);
    }

    public void hideNotification(String userId, Long notificationId) {
        User user = userRepo.findByUserID(userId);
        if (user == null) throw new RuntimeException("User not found");

        Notification notification = notificationRepo.findByNotificationIdAndUser(notificationId, user);
        if (notification == null) throw new RuntimeException("Notification not found");

        notification.setStatus(NotificationStatus.HIDDEN);
        notificationRepo.save(notification);
    }

    public void hideAllNotifications(String userId) {
        User user = userRepo.findByUserID(userId);
        if (user == null) throw new RuntimeException("User not found");

        List<Notification> list = notificationRepo.findByUserAndStatusOrderByCreatedTimeDesc(user, NotificationStatus.ACTIVE);
        for (Notification n : list) {
            n.setStatus(NotificationStatus.HIDDEN);
        }
        notificationRepo.saveAll(list);
    }

    // ===== C√ÅC METHOD M·ªöI CHO 3 TR∆Ø·ªúNG H·ª¢P TH√îNG B√ÅO =====

    /**
     * 1. G·ª≠i th√¥ng b√°o khi b√†i ƒëƒÉng ƒë∆∞·ª£c duy·ªát (APPROVED)
     */
    public void notifyListingApproved(User user, Listing listing) {
        String message = String.format(
            "üéâ B√†i ƒëƒÉng '%s' c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† ƒëang hi·ªÉn th·ªã c√¥ng khai!",
            listing.getTitle()
        );
        createNotificationForUser(user, message);
    }

    /**
     * 1.1. G·ª≠i th√¥ng b√°o khi b√†i ƒëƒÉng b·ªã t·ª´ ch·ªëi (REJECTED)
     */
    public void notifyListingRejected(User user, Listing listing) {
        String message = String.format(
            "‚ùå B√†i ƒëƒÉng '%s' c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi. Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi dung v√† g·ª≠i l·∫°i.",
            listing.getTitle()
        );
        createNotificationForUser(user, message);
    }

    /**
     * 2. G·ª≠i th√¥ng b√°o khi c√≥ ng∆∞·ªùi review/comment
     */
    public void notifyNewReview(User reviewedUser, User reviewer, int rating, String comment) {
        String stars = "‚≠ê".repeat(rating);
        String message = String.format(
            "üí¨ %s ƒë√£ ƒë√°nh gi√° b·∫°n %s (%d/5 sao)%s",
            reviewer.getUserName(),
            stars,
            rating,
            comment != null && !comment.isEmpty() ? ": \"" + comment + "\"" : ""
        );
        createNotificationForUser(reviewedUser, message);
    }

    /**
     * 3. G·ª≠i th√¥ng b√°o khi g√≥i subscription s·∫Øp h·∫øt h·∫°n (tr∆∞·ªõc 2 ng√†y)
     * Ch·∫°y t·ª± ƒë·ªông m·ªói ng√†y l√∫c 9:00 s√°ng
     */
    @Scheduled(cron = "0 0 9 * * *") // Ch·∫°y l√∫c 9:00 AM m·ªói ng√†y
    public void checkExpiringSubscriptions() {
        // T√≠nh ng√†y sau 2 ng√†y
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        calendar.add(Calendar.DAY_OF_MONTH, 2);
        Date twoDaysLater = calendar.getTime();

        // T√≠nh cu·ªëi ng√†y sau 2 ng√†y
        Calendar calendar2 = Calendar.getInstance();
        calendar2.set(Calendar.HOUR_OF_DAY, 23);
        calendar2.set(Calendar.MINUTE, 59);
        calendar2.set(Calendar.SECOND, 59);
        calendar2.add(Calendar.DAY_OF_MONTH, 2);
        Date endOfTwoDaysLater = calendar2.getTime();

        // T√¨m c√°c subscription s·∫Øp h·∫øt h·∫°n trong 2 ng√†y t·ªõi
        List<User_Subscription> expiringSubs = userSubRepo.findByEndDateBetween(twoDaysLater, endOfTwoDaysLater);

        for (User_Subscription userSub : expiringSubs) {
            String message = String.format(
                "‚ö†Ô∏è G√≥i '%s' c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n v√†o %s. Gia h·∫°n ngay ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng!",
                userSub.getSubscriptionId().getSubName(),
                formatDate(userSub.getEndDate())
            );
            createNotificationForUser(userSub.getUser(), message);
        }

        System.out.println("‚úÖ Checked " + expiringSubs.size() + " expiring subscriptions");
    }

    /**
     * 4. T·ª± ƒë·ªông update status = "EXPIRED" cho c√°c subscription ƒë√£ h·∫øt h·∫°n
     * Ch·∫°y t·ª± ƒë·ªông m·ªói ng√†y l√∫c 0:00 (12:00 AM)
     */
    @Scheduled(cron = "0 0 0 * * *") // Ch·∫°y l√∫c 12:00 AM m·ªói ng√†y
    public void updateExpiredSubscriptions() {
        Date now = new Date();
        
        // T√¨m t·∫•t c·∫£ subscription c√≥ status = "ACTIVE" v√† endDate < now
        List<User_Subscription> activeSubs = userSubRepo.findByStatus("ACTIVE");
        int expiredCount = 0;
        
        for (User_Subscription userSub : activeSubs) {
            if (userSub.getEndDate() != null && userSub.getEndDate().before(now)) {
                userSub.setStatus("EXPIRED");
                userSubRepo.save(userSub);
                
                // G·ª≠i th√¥ng b√°o cho user
                String message = String.format(
                    "‚è∞ G√≥i '%s' c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n. Gia h·∫°n ngay ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng cao c·∫•p!",
                    userSub.getSubscriptionId().getSubName()
                );
                createNotificationForUser(userSub.getUser(), message);
                
                expiredCount++;
            }
        }
        
        System.out.println("‚úÖ Updated " + expiredCount + " expired subscriptions to EXPIRED status");
    }

    /**
     * 5. T·ª± ƒë·ªông cancel Payment PENDING h·∫øt h·∫°n (> 30 ph√∫t)
     * Ch·∫°y t·ª± ƒë·ªông m·ªói 30 ph√∫t
     */
    @Scheduled(cron = "0 */30 * * * *") // Ch·∫°y m·ªói 30 ph√∫t
    public void cancelExpiredPayments() {
        Date now = new Date();
        long thirtyMinutesAgo = now.getTime() - (30 * 60 * 1000);
        Date expireTime = new Date(thirtyMinutesAgo);
        
        // T√¨m t·∫•t c·∫£ Payment PENDING ƒë√£ qu√° 30 ph√∫t
        List<Payment> pendingPayments = paymentRepo.findByStatus(PaymentStatus.PENDING);
        int cancelledCount = 0;
        
        for (Payment payment : pendingPayments) {
            if (payment.getCreateDate().before(expireTime)) {
                // Cancel payment
                payment.setStatus(PaymentStatus.CANCELLED);
                payment.setUpdatedAt(now);
                paymentRepo.save(payment);
                cancelledCount++;
                
                System.out.println("‚è∞ Auto-cancelled expired payment: " + payment.getOrderId());
            }
        }
        
        System.out.println("‚úÖ Cancelled " + cancelledCount + " expired payments (> 30 min)");
    }

    /**
     * 6. T·ª± ƒë·ªông cancel User_Subscription PENDING_PAYMENT kh√¥ng c√≥ payment th√†nh c√¥ng sau 24h
     * Ch·∫°y t·ª± ƒë·ªông m·ªói ng√†y l√∫c 1:00 AM
     */
    @Scheduled(cron = "0 0 1 * * *") // Ch·∫°y l√∫c 1:00 AM m·ªói ng√†y
    public void cancelExpiredPendingSubscriptions() {
        // T√¨m t·∫•t c·∫£ subscription PENDING_PAYMENT
        List<User_Subscription> pendingSubs = userSubRepo.findByStatus("PENDING_PAYMENT");
        int cancelledCount = 0;
        
        for (User_Subscription userSub : pendingSubs) {
            // L·∫•y t·∫•t c·∫£ payment c·ªßa subscription n√†y
            List<Payment> payments = paymentRepo.findByUserSubscription(userSub);
            
            if (payments.isEmpty()) {
                // Kh√¥ng c√≥ payment n√†o ‚Üí x√≥a subscription r√°c
                userSubRepo.delete(userSub);
                cancelledCount++;
                continue;
            }
            
            // L·∫•y payment m·ªõi nh·∫•t
            Payment latestPayment = payments.get(0);
            for (Payment p : payments) {
                if (p.getCreateDate().after(latestPayment.getCreateDate())) {
                    latestPayment = p;
                }
            }
            
            // Check xem payment m·ªõi nh·∫•t ƒë√£ qu√° 24h ch∆∞a
            long hoursAgo = (new Date().getTime() - latestPayment.getCreateDate().getTime()) / (60 * 60 * 1000);
            if (hoursAgo > 24) {
                // Qu√° 24h, kh√¥ng c√≥ payment COMPLETED ‚Üí cancel subscription
                userSub.setStatus("CANCELLED");
                userSubRepo.save(userSub);
                cancelledCount++;
                
                System.out.println("‚è∞ Auto-cancelled pending subscription: " + userSub.getUserSubId() + 
                                 " (no payment for 24h)");
            }
        }
        
        System.out.println("‚úÖ Cancelled " + cancelledCount + " pending subscriptions (> 24h)");
    }

    /**
     * T·∫°o notification cho user (internal method)
     */
    private void createNotificationForUser(User user, String message) {
        Notification notification = new Notification();
        notification.setUser(user);
        notification.setMessage(message);
        notification.setCreatedTime(new Date());
        notification.setStatus(NotificationStatus.ACTIVE);
        notificationRepo.save(notification);
        
        System.out.println("üì© Notification sent to " + user.getUserEmail() + ": " + message);
    }

    /**
     * Format date DD/MM/YYYY
     */
    private String formatDate(Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return String.format("%02d/%02d/%d", 
            cal.get(Calendar.DAY_OF_MONTH),
            cal.get(Calendar.MONTH) + 1,
            cal.get(Calendar.YEAR)
        );
    }

}
